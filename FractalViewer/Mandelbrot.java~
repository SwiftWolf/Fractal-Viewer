package Gone4Combo;

import java.awt.*;
import java.awt.image.BufferedImage;


import javax.swing.*;

@SuppressWarnings("serial")
public class Mandelbrot extends JPanel {

	/* The portion of the plane stretching from -2 to 2 in the Real Axis 
	 * and from -1.6 to 1.6 in the Imaginary Axis*/
	protected double realAxisFrom = -2;
	protected double realAxisTo = 2;
	protected double imaginaryAxisFrom = -1.6;
	protected double imaginaryAxisTo = 1.6;
	protected int iterations = 100;
	private boolean draw = false;

	@Override
	public void paintComponent(Graphics g) {
		if (draw){
			int width = getWidth();
			int height = getHeight();

			double xStep = (realAxisTo - realAxisFrom) / (double) width;
			double yStep = (imaginaryAxisTo - imaginaryAxisFrom) / (double) height;

			for (int i = 0; i < width; i++){
				for(int j = 0; j < height; j++){
					int sequence = getIterations(new ComplexNumber(realAxisFrom + i * xStep, imaginaryAxisFrom + j * yStep));
					g.setColor(sequence == iterations ? Color.BLACK : Color.getHSBColor(0.5f + sequence/(float)iterations, 1f, 1f));
					g.fillRect(i, j, 1, 1);
				}
			}
		}
	}

	public int getIterations(ComplexNumber c){
		ComplexNumber z = new ComplexNumber();
		int sequence;
		for(sequence = 0; sequence < iterations; sequence++){
			if (z.modulusSquared() > 4){
				break;
			}
			z = z.multiply(z).add(c);
		}
		return sequence;
	}

	public void draw(){
		draw = true;
	}

	public void setIterations(int iterations){
		this.iterations = iterations;
	}

	public void setrealAxisFrom(double realAxisFrom){
		this.realAxisFrom = realAxisFrom;
	}

	public void setrealAxisTo(double realAxisTo){
		this.realAxisTo = realAxisTo;
	}

	public void setimaginaryAxisFrom(double imaginaryAxisFrom){
		this.imaginaryAxisFrom = imaginaryAxisFrom;
	}

	public void setimaginaryAxisTo(double imaginaryAxisTo){
		this.imaginaryAxisTo = imaginaryAxisTo;
	}

	public double getRealAxisFrom() {
		return realAxisFrom;
	}

	public double getRealAxisTo() {
		return realAxisTo;
	}

	public double getImaginaryAxisFrom() {
		return imaginaryAxisFrom;
	}

	public double getImaginaryAxisTo() {
		return imaginaryAxisTo;
	}

	public int getIterations() {
		return iterations;
	}

}



